{"version":3,"sources":["server.js"],"names":["PORT","process","env","server","wss","app","on","ws","console","log","broadcast","fn","args","i","clients","call","message","flags","objMessage","JSON","parse","type","availablePeers","id","destination","listen","address","port"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AACA,IAAMG,SAAS,yBAAf;AACA,IAAMC,MAAM,eAAW,EAAED,QAAQA,MAAV,EAAX,CAAZ;;AAEA,IAAME,MAAM,wBAAZ;;AAEA,4BAAkBA,GAAlB;;AAEAD,IAAIE,EAAJ,CAAO,YAAP,EAAqB,UAACC,EAAD,EAAQ;AACzBC,YAAQC,GAAR,CAAY,0BAAZ;;AAEAL,QAAIM,SAAJ,GAAgB,UAAUC,EAAV,EAAcJ,EAAd,EAA2B;AAAA,0CAANK,IAAM;AAANA,gBAAM;AAAA;;AACvC,aAAK,IAAIC,CAAT,IAAc,KAAKC,OAAnB,EAA4B;AACxB;AACA,gBAAI,KAAKA,OAAL,CAAaD,CAAb,MAAoBN,EAAxB,EAA4B;AACxBC,wBAAQC,GAAR,CAAYI,CAAZ;AACAF,mBAAGI,IAAH,YAAQ,IAAR,SAAiBH,IAAjB,GAAuB,KAAKE,OAAL,CAAaD,CAAb,CAAvB;AACH;AACJ;AACJ,KARD;;AAUAN,OAAGD,EAAH,CAAM,SAAN,EAAiB,UAACU,OAAD,EAAUC,KAAV,EAAoB;AACjC,YAAIC,aAAaC,KAAKC,KAAL,CAAWJ,OAAX,CAAjB;AACA,YAAIE,WAAWD,KAAX,KAAqB,WAAzB,EAAsC;AAClCT,oBAAQC,GAAR,CAAY,WAAZ;AACA;AACAL,gBAAIM,SAAJ,8BAA2BH,EAA3B,EAA+BW,UAA/B;AACH,SAJD,MAIO,IAAIA,WAAWD,KAAX,KAAqB,MAAzB,EAAiC;AACpCT,oBAAQC,GAAR,CAAY,MAAZ;AACA;AACA,6CAAYS,UAAZ,EAAwBX,EAAxB;AACH,SAJM,MAIA;AACH;AACA,0CAAcW,UAAd,EAA0BX,EAA1B;AACH;AACJ,KAdD;;AAgBAA,OAAGD,EAAH,CAAM,OAAN,EAAe,YAAM;AACjB,YAAMM,OAAO;AACTS,kBAAM,gBADG;AAETC,4BAAgBf,GAAGgB,EAFV;AAGTC,yBAAa,IAHJ;AAITP,mBAAO;AAJE,SAAb;AAMA,wCAAWV,GAAGgB,EAAd;AACAnB,YAAIM,SAAJ,8BAA2BH,EAA3B,EAA+BK,IAA/B;AACH,KATD;AAUH,CAvCD;;AAyCAT,OAAOG,EAAP,CAAU,SAAV,EAAqBD,GAArB;AACAF,OAAOsB,MAAP,CAAczB,IAAd,EAAoB;AAAA,WAAMQ,QAAQC,GAAR,CAAY,kBAAkBN,OAAOuB,OAAP,GAAiBC,IAA/C,CAAN;AAAA,CAApB;;AAEAnB,QAAQC,GAAR,CAAY,sCAAsCT,IAAlD","file":"server.js","sourcesContent":["import { createServer } from 'http'\nimport { Server } from 'ws'\nimport express from 'express'\nimport startStaticServer from './staticServer'\nimport signalHandler, { dataHandler, deletePeer } from './messageHandler'\n\nconst PORT = process.env.PORT || 8089\nconst server = createServer()\nconst wss = new Server({ server: server })\n\nconst app = express()\n\nstartStaticServer(app)\n\nwss.on('connection', (ws) => {\n    console.log('connection from a client')\n\n    wss.broadcast = function (fn, ws, ...args) {\n        for (var i in this.clients) {\n            // Broadcast to anyone except the incoming connection\n            if (this.clients[i] !== ws) {\n                console.log(i)\n                fn.call(this, ...args, this.clients[i])\n            }\n        }\n    }\n\n    ws.on('message', (message, flags) => {\n        var objMessage = JSON.parse(message)\n        if (objMessage.flags === 'broadcast') {\n            console.log('BROADCAST')\n            // Broadcast message to anyone\n            wss.broadcast(dataHandler, ws, objMessage)\n        } else if (objMessage.flags === 'data') {\n            console.log('DATA')\n            // Compute data and sent by to source\n            dataHandler(objMessage, ws)\n        } else {\n            // Handle signal for RTC Session negociation\n            signalHandler(objMessage, ws)\n        }\n    })\n\n    ws.on('close', () => {\n        const args = {\n            type: 'availablePeers',\n            availablePeers: ws.id,\n            destination: null,\n            flags: 'data'\n        }\n        deletePeer(ws.id)\n        wss.broadcast(dataHandler, ws, args)\n    })\n})\n\nserver.on('request', app)\nserver.listen(PORT, () => console.log('Listening on ' + server.address().port))\n\nconsole.log('started signaling server on port ' + PORT)\n"],"sourceRoot":"/source/"}