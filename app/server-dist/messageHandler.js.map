{"version":3,"sources":["messageHandler.js"],"names":["getConnectedPeers","deletePeer","onMessage","dataHandler","callDataMethod","connectedPeers","protocolMethods","dataMethods","id","message","ws","type","indexOf","callProtocolMethod","Error","mess","data","args","destination","console","log","send","res","peers","removeElem","array","elem","index","splice"],"mappings":"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","file":"messageHandler.js","sourcesContent":["const connectedPeers = {}\n\nconst protocolMethods = ['ICECandidate', 'offer', 'answer', 'init']\nconst dataMethods = ['checkAvailablePseudo', 'availablePeers']\n\nexport function getConnectedPeers () {\n    return connectedPeers\n}\n\nexport function deletePeer (id) {\n    delete connectedPeers[id]\n}\n\nexport default function onMessage (message, ws) {\n    var { type } = message\n\n    if (protocolMethods.indexOf(type) > -1) {\n        callProtocolMethod(type, message, ws)\n    } else {\n        throw new Error('Invalid message type')\n    }\n}\n\nfunction callProtocolMethod (type, mess, ws) {\n    const data = mess ? mess[type] : null\n    const args = (connectedPeers[mess.destination])\n        ? { type: mess.type, [type]: data, source: ws.id }\n        : { type: 'error', message: 'Unreachable', destination: mess.destination }\n\n    if (type === 'init') {\n        console.log('init from peer:', data) // mess.init = socket id\n        ws.id = data\n        connectedPeers[data] = ws\n        return\n    }\n\n    if (args.type === 'error') {\n        ws.send(JSON.stringify(args)) // Callback message to source\n    } else {\n        connectedPeers[mess.destination].send(JSON.stringify(args)) // Forward message to destination\n    }\n}\n\n// Simulate Router behaviour\nexport function dataHandler (message, ws) {\n    var { type } = message\n\n    if (dataMethods.indexOf(type) > -1) {\n        callDataMethod(type, message, ws)\n    } else {\n        throw new Error(`Invalid data type : ${type}`)\n    }\n}\n\n// Sync methods (No complex async operation here)\nexport function callDataMethod (type, mess, ws) {\n    let res = null\n    const data = mess ? mess[type] : null\n    console.log(type)\n    switch (type) {\n    case 'availablePeers':\n        const peers = Object.keys(getConnectedPeers())\n        console.log(peers)\n        res = removeElem(peers, data)\n        break\n    case 'checkAvailablePseudo':\n        res = Object.keys(getConnectedPeers()).indexOf(data) === -1\n        break\n    default:\n        break\n    }\n\n    // In the callDataMethod source\n    const args = { type: type, [type]: res, source: data }\n    ws.send(JSON.stringify(args))\n}\n\n// Mutate function\nfunction removeElem (array, elem) {\n    if (!array) { throw new Error('array must be an array') }\n\n    if (!elem) { return array }\n\n    const index = array.indexOf(elem)\n    if (index > -1) { array.splice(index, 1) }\n    return array\n}\n"],"sourceRoot":"/source/"}