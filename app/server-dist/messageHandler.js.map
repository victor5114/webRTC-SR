{"version":3,"sources":["messageHandler.js"],"names":["getConnectedPeers","setConnectedPeer","deletePeer","onMessage","dataHandler","callDataMethod","connectedPeers","protocolMethods","dataMethods","id","ws","message","type","indexOf","callProtocolMethod","Error","mess","data","args","destination","console","log","send","res","peers","removeElem","array","elem","index","splice"],"mappings":"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","file":"messageHandler.js","sourcesContent":["/* Store the Map of connected peers in realtime */\nconst connectedPeers = {}\n\n/* Methods used for signaling protocol */\nconst protocolMethods = ['ICECandidate', 'offer', 'answer', 'init']\n\n/* Methods used for application Real time communication */\nconst dataMethods = ['checkAvailablePseudo', 'availablePeers']\n\n/**\n* @public\n* @function getConnectedPeers\n* @description Get global object connectedPeers\n* @return {Object} connectedPeers - The connected peers list.\n*/\nexport function getConnectedPeers () {\n    return connectedPeers\n}\n\n/**\n* @public\n* @function setConnectedPeer\n* @description Add a new peer in the list or override if already exist\n* @param {String} id - Unique peerID\n* @param {WebSocket} ws - Websocket connection\n*/\nexport function setConnectedPeer (id, ws) {\n    connectedPeers[id] = ws\n}\n\n/**\n* @public\n* @function deletePeer\n* @description Delete a peer from list\n* @param {String} id - Unique peerID\n*/\nexport function deletePeer (id) {\n    delete connectedPeers[id]\n}\n\n/**\n* @public\n* @function onMessage\n* @description Triggered when websocket channel receives new message\n* @param {Object} message - Message content\n* @param {WebSocket} ws - Websocket connection\n*/\nexport default function onMessage (message, ws) {\n    const { type } = message\n\n    if (protocolMethods.indexOf(type) > -1) {\n        callProtocolMethod(type, message, ws)\n    } else {\n        throw new Error('Invalid message type')\n    }\n}\n\n/**\n* @private\n* @function callProtocolMethod\n* @description Simply forward message to other peer during protocol hand ckeck\n* @param {string} type - Type of message\n* @param {Object} message - Message content\n* @param {WebSocket} ws - Websocket connection\n*/\nfunction callProtocolMethod (type, mess, ws) {\n    const data = mess ? mess[type] : null\n    const args = (getConnectedPeers()[mess.destination])\n        ? { type: mess.type, [type]: data, source: ws.id }\n        : { type: 'error', message: 'Unreachable', destination: mess.destination }\n\n    // If type init we just set a new peer. No response to client needed\n    if (type === 'init') {\n        console.log('init from peer:', data) // mess.init = socket id\n        ws.id = data\n        setConnectedPeer(data, ws)\n        return\n    }\n\n    if (args.type === 'error') {\n        // Callback message to source\n        ws.send(JSON.stringify(args))\n    } else {\n        // Forward message to destination\n        getConnectedPeers()[mess.destination].send(JSON.stringify(args))\n    }\n}\n\n/**\n* @public\n* @function dataHandler\n* @description Called when applicative message has been received on a channel\n* @param {Object} message - Message content\n* @param {WebSocket} ws - Websocket connection\n*/\nexport function dataHandler (message, ws) {\n    const { type } = message\n\n    if (dataMethods.indexOf(type) > -1) {\n        callDataMethod(type, message, ws)\n    } else {\n        throw new Error(`Invalid data type : ${type}`)\n    }\n}\n\n/**\n* @public\n* @function callDataMethod\n* @description Simply forward message to other peer during protocol hand ckeck\n* @param {string} type - Type of message\n* @param {Object} message - Message content\n* @param {WebSocket} ws - Websocket connection\n*/\nexport function callDataMethod (type, mess, ws) {\n    let res = null\n    const data = mess ? mess[type] : null\n    switch (type) {\n    case 'availablePeers':\n        const peers = Object.keys(getConnectedPeers())\n        res = removeElem(peers, data)\n        break\n    case 'checkAvailablePseudo':\n        res = Object.keys(getConnectedPeers()).indexOf(data) === -1\n        break\n    default:\n        break\n    }\n\n    // In the callDataMethod source\n    const args = { type: type, [type]: res, source: data }\n    ws.send(JSON.stringify(args))\n}\n\n/**\n* @private\n* @function removeElem\n* @description Utility method to remove first occurence of a elem from array.\n* @param {Array} array - An array\n* @param {string} elem - elem\n* @return {Array} array - New array. Don't mutate the first one\n*/\nfunction removeElem (array, elem) {\n    if (!array) { throw new Error('array must be an array') }\n\n    if (!elem) { return array }\n\n    const index = array.indexOf(elem)\n    if (index > -1) { array.splice(index, 1) }\n    return array\n}\n"],"sourceRoot":"/source/"}